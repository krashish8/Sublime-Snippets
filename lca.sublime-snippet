<snippet>
	<content><![CDATA[
const int LOGN = 20;

vector<int> g[N];
int dep[N], dp[LOGN][N];

// Traversal is started from node 1.
// dp[i][x]: moving towards parent node = x + 2^i node in main tree
// dep[x]: depth of node x in main tree, descending from parent

void dfs2(int u, int p) {
    for (auto v : g[u]) {
        if (v == p) continue;
        dep[v] = dep[u] + 1;
        dp[0][v] = u;
        dfs2(v, u);
    }
}

void preprocess(int n) {
    dep[1] = 0;
    dp[0][1] = 1;
    dfs2(1, 0);
    for (int k = 1; k < LOGN; k++) {
        for (int i = 1; i <= n; i++) {
            dp[k][i] = dp[k-1][dp[k-1][i]];
        }
    }
}

int lca(int u, int v) {
    if (dep[u] > dep[v]) swap(u, v);
    int d = dep[v] - dep[u];
    for (int k = LOGN - 1; k >= 0; k--) {
        if (d & (1 << k))
            v = dp[k][v];
    }
    if (u == v) return u;
    for (int k = LOGN - 1; k >= 0; k--) {
        if (dp[k][u] != dp[k][v])
            u = dp[k][u], v = dp[k][v];
    }
    return dp[0][u];
}

int dis(int a, int b) {
    return dep[a] + dep[b] - 2 * dep[lca(a, b)];
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>lca</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
